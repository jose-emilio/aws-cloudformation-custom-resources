AWSTemplateFormatVersion: 2010-09-09
Description: Custom resource
Parameters:
  Prefijo:
    Type: String
    Default: testbucket

Resources:  
  BucketS3Personalizado:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt FuncionS3.Arn
      NombreBucket: !Join
                      - "-"
                      - - !Ref Prefijo
                        - !Select
                          - 0
                          - !Split
                            - "-"
                            - !Select
                              - 2
                              - !Split
                                - "/"
                                - !Ref "AWS::StackId"
      
  FuncionS3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os

          response_data = {}

          client = boto3.client('s3',os.environ['Region'])
          resource = boto3.resource('s3',os.environ['Region'])

          def lambda_handler(event, context):
            try:
              mibucket=event['ResourceProperties']['NombreBucket']
              if event['RequestType'] == 'Create':
                response = client.create_bucket(
                    ACL='private',
                    Bucket=mibucket
                )
                response_data['NombreBucket'] = mibucket
              elif event['RequestType'] == 'Delete':
                bucket = resource.Bucket(mibucket)
                bucket.objects.all().delete()
                response = client.delete_bucket(
                  Bucket=mibucket
                )
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              response_data['Error'] = str(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !GetAtt RolLambdaS3.Arn
      Environment:
        Variables:
          Region: !Sub ${AWS::Region}

  RolLambdaS3:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: CloudWatch-Lambda
       - PolicyDocument:
           Statement:
           - Action:
             - s3:CreateBucket
             - s3:DeleteBucket
             - s3:DeleteObject
             - s3:ListObjects
             - s3:ListBucket
             Effect: Allow
             Resource:
             - !Sub "arn:${AWS::Partition}:s3:::*"
             - !Sub "arn:${AWS::Partition}:s3:::*/*"
           Version: '2012-10-17'
         PolicyName: S3-Lambda

Outputs:
  Bucket:
    Description: Nombre del bucket de S3
    Value: !GetAtt BucketS3Personalizado.NombreBucket